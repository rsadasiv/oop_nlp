Testing_GER
Java_NN
classes_NN
that_TSUB
have_VPRT
a_DT
main_JJ
function_NOMZ
-LRB-_-LRB-
i.e._CONJ
they_TPP3
're_VPRT [CONT] [PASS]
meant_VBN [PRIV]
to_TO
be_VB [PASS]
run_VBN
from_PIN
the_DT
command_NN
line_NN
-RRB-_-RRB-
can_POMD
be_VB [BEMA]
a_DT
bit_NN
tricky_JJ
._.
Most_EMPH
main_JJ
functions_NOMZ
print_VPRT
to_PIN
the_DT
standard_NN
out_PIN
and_CC
err_VB
streams_NN
and_CC
call_VB
System_NN
._.
exit_NN
-LRB-_-LRB-
1_CD
-RRB-_-RRB-
if_COND
something_QUPR
goes_VPRT
wrong_JJ
._.
In_PIN
order_NN
to_TO
test_VB
the_DT
correct_JJ
functionality_NOMZ
of_PIN
the_DT
method_NN
for_PIN
all_QUAN
conditionals_NN
,_,
the_DT
test_NN
method_NN
is_VPRT
going_VBG
to_TO
have_VB
to_TO
read_VB
the_DT
output_NN
streams_NN
and_CC
prevent_VB
System_NN
._.
exit_NN
from_PIN
ending_VBG
the_DT
test_NN
itself_PIT
._.
The_DT
solutions_NOMZ
given_VBN [WZPAST]
here_RB
are_VPRT [PASS]
generalized_VBN
for_PIN
most_EMPH
main_JJ
functions_NOMZ
,_,
but_CC
will_PRMD
work_VB
on_PIN
other_JJ
code_NN
that_TSUB
has_VPRT
System_NN
._.
out_PIN [STPR]
,_,
System_NN
._.
err_VB
,_,
or_CC
System_NN
._.
exit_NN
calls_NN
._.
Hopefully_RB
the_DT
code_NN
below_PLACE
is_VPRT [BEMA]
mostly_RB
self-explanitory_PRED
._.
The_DT
output_NN
streams_NN
are_VPRT [BYPA]
captured_VBN
by_PIN
calling_VBG
the_DT
System_NN
._.
setOut_NN
and_PHC
System_NN
._.
setErr_NN
methods_NN
._.
The_DT
output_NN
to_PIN
those_DEMO
streams_NN
are_VPRT [PASS]
stored_VBN
in_PIN
ByteArrayOutputStreams_NN
which_WDT [WHSUB]
are_VPRT [SPAU] [PASS]
easily_RB
converted_VBN
into_PIN
Strings_GER
by_PIN
using_VBG
the_DT
toString_VBG
method_NN
._.
You_SPP2
should_NEMD [SPAU]
usually_RB
test_VB
for_PIN
both_DT
expecting_VBG [PRIV]
and_CC
not_XX0
expecting_VBG [PRIV]
error_NN
and_PHC
output_NN
._.
If_COND
you_SPP2
know_VPRT [PRIV]
the_DT
exact_JJ
error_NN
or_CC
output_NN
that_DEMP
is_VPRT [PASS]
expected_VBN [PRIV]
,_,
or_CC
even_RB
a_DT
phrase_NN
or_CC
keyword_NN
,_,
that_DEMP
should_NEMD
be_VB [PASS]
tested_VBN
for_PIN
also_RB
._.
The_DT
System_NN
._.
exit_NN
is_VPRT [BYPA]
handled_VBN
by_PIN
setting_VBG
a_DT
restrictive_JJ
security_NOMZ
policy_NN
._.
This_DEMP
can_POMD
be_VB [PASS]
done_EMPH
using_VBG
Java_NN
's_POS
security_NOMZ
._.
policy_NN
file_NN
-LRB-_-LRB-
I_FPP1
think_VPRT [PRIV]
..._:
-RRB-_-RRB-
,_,
but_CC
it_PIT
is_VPRT [BEMA]
more_EMPH
verbose_PRED
and_PHC
manipulatable_PRED
to_TO
set_VB
the_DT
JVM_NN
's_POS
SecurityManager_NN
class_NN
._.
I_FPP1
create_VPRT
an_DT
anonymous_JJ
inner_JJ
class_NN
that_TSUB
overwrites_VPRT
the_DT
checkExit_NN
function_NOMZ
and_CC
throws_VPRT
a_DT
SecurityException_NOMZ
in_PIN
every_QUAN
case_NN
._.
I_FPP1
also_RB
reset_VB
the_DT
JVM_NN
's_POS
SecurityManager_NN
back_RB
to_PIN
the_DT
original_JJ
one_CD
after_IN
the_DT
test_NN
is_VPRT [PASS]
done_VBN
to_TO
prevent_VB
any_QUAN
unintentional_JJ
side_NN
effects_NN
from_PIN
the_DT
test_NN
method_NN
._.
public_JJ
class_NN
MainFunctionTest_NN
extends_VPRT
TestCase_NN
-LCB-_-LRB-
ByteArrayOutputStream_NN
out_PIN
;_:
ByteArrayOutputStream_NN
err_VB
;_:
\/_CD
\*\*_SYM
\*_SYM
Sets_NN
up_IN
the_DT
fixture_NN
by_PIN
creating_VBG
System_NN
._.
out_PIN
and_CC
System_NN
._.
err_VB
redirects_NN
._.
\*_SYM
This_DEMO
method_NN
is_VPRT [PASS]
called_VBN
before_IN
a_DT
test_NN
is_VPRT [PASS]
executed_VBN
._.
\*_SYM
\/_NN
protected_VBN
void_JJ
setUp_NN
-LRB-_-LRB-
-RRB-_-RRB-
throws_VPRT
Exception_NOMZ
-LCB-_-LRB-
super_JJ
._.
setUp_NN
-LRB-_-LRB-
-RRB-_-RRB-
;_:
out_PIN
=_SYM
new_JJ
ByteArrayOutputStream_NN
-LRB-_-LRB-
-RRB-_-RRB-
;_:
System_NN
._.
setOut_NN
-LRB-_-LRB-
new_JJ
PrintStream_NN
-LRB-_-LRB-
out_PIN
-RRB-_-RRB-
-RRB-_-RRB-
;_:
err_VB
=_SYM
new_JJ
ByteArrayOutputStream_NN
-LRB-_-LRB-
-RRB-_-RRB-
;_:
System_NN
._.
setErr_NN
-LRB-_-LRB-
new_JJ
PrintStream_NN
-LRB-_-LRB-
err_VB
-RRB-_-RRB-
-RRB-_-RRB-
;_:
-RCB-_-RRB-
public_JJ
void_JJ
testOut_NN
-LRB-_-LRB-
-RRB-_-RRB-
-LCB-_-LRB-
String_GER
-LRB-_-LRB-
-RRB-_-RRB-
args_VPRT
=_SYM
new_JJ
String_GER
-LRB-_-LRB-
-RRB-_-RRB-
-LCB-_-LRB-
``_``
arg1_NN
''_''
-RCB-_-RRB-
;_:
JBench_NN
._.
main_JJ
-LRB-_-LRB-
args_NN
-RRB-_-RRB-
;_:
\/_CD
\/_CD
Expect_VB [PRIV]
nothing_INPR
on_PIN
the_DT
error_NN
stream_NN
,_,
something_QUPR
on_PIN
the_DT
output_NN
stream_NN
assertTrue_NN
-LRB-_-LRB-
err_VB
._.
toString_VBG
-LRB-_-LRB-
-RRB-_-RRB-
._.
length_NN
-LRB-_-LRB-
-RRB-_-RRB-
=_SYM
=_SYM
0_CD
-RRB-_-RRB-
;_:
assertTrue_NN
-LRB-_-LRB-
out_PIN [STPR]
._.
toString_VBG
-LRB-_-LRB-
-RRB-_-RRB-
._.
length_NN
-LRB-_-LRB-
-RRB-_-RRB-
-RRB-_-RRB-
0_CD
-RRB-_-RRB-
;_:
-RCB-_-RRB-
public_JJ
void_JJ
testNoArgs_NN
-LRB-_-LRB-
-RRB-_-RRB-
-LCB-_-LRB-
SecurityManager_NN
curSecurityManager_NN
=_SYM
System_NN
._.
getSecurityManager_NN
-LRB-_-LRB-
-RRB-_-RRB-
;_:
System_NN
._.
setSecurityManager_NN
-LRB-_-LRB-
new_JJ
java_NN
._.
lang_NN
._.
SecurityManager_NN
-LRB-_-LRB-
-RRB-_-RRB-
-LCB-_-LRB-
public_JJ
void_JJ
checkExit_NN
-LRB-_-LRB-
int_FW
code_NN
-RRB-_-RRB-
-LCB-_-LRB-
throw_VB
new_JJ
SecurityException_NOMZ
-LRB-_-LRB-
-RRB-_-RRB-
;_:
-RCB-_-RRB-
-RCB-_-RRB-
-RRB-_-RRB-
;_:
try_VB
-LCB-_-LRB-
JBench_NN
._.
main_JJ
-LRB-_-LRB-
new_JJ
String_GER
-LRB-_-LRB-
-RRB-_-RRB-
-LCB-_-LRB-
-RCB-_-RRB-
-RRB-_-RRB-
;_:
fail_VB
-LRB-_-LRB-
-RRB-_-RRB-
;_:
-RCB-_-RRB-
catch_NN
-LRB-_-LRB-
SecurityException_NOMZ
ex_FW
-RRB-_-RRB-
-LCB-_-LRB-
\/_CD
\*_SYM
expected_VBN [PRIV]
\*_SYM
\/_NN
-RCB-_-RRB-
finally_RB
-LCB-_-LRB-
System_NN
._.
setSecurityManager_NN
-LRB-_-LRB-
curSecurityManager_NN
-RRB-_-RRB-
;_:
-RCB-_-RRB-
-RCB-_-RRB-
-RCB-_-RRB-
Do_VPRT
not_XX0
take_VB
the_DT
above_PLACE
code_NN
as_IN
a_DT
good_JJ
example_NN
of_PIN
a_DT
UnitTest_NN
class_NN
._.
I_FPP1
left_VBD
a_EMPH
lot_NULL
of_PIN
``_``
good_JJ
practices_NN
''_''
out_PIN
for_PIN
the_DT
sake_NN
of_PIN
brevity_NOMZ
._.
-----------------_JJ
Quick_NN
update_VPRT
on_PIN
JBench_NN
._.
The_DT
project_NN
has_VPRT [PEAS]
been_VBN [BEMA]
dead_PRED
for_PIN
2_CD
years_NN
._.
I_FPP1
contacted_VBD
the_DT
original_JJ
developer_NN
and_CC
he_TPP3
is_VPRT [SPAU]
currently_RB
working_VBG
on_PIN [STPR]
._.
NET_NN
stuff_NN
and_CC
wo_PRMD
n't_XX0 [CONT]
be_VB
updating_VBG
JBench_NN
._.
I_FPP1
'm_VPRT [CONT]
working_VBG
on_PIN
refactoring_VBG
it_PIT
and_CC
adding_VBG [PUBV]
a_DT
bunch_NN
of_PIN
new_JJ
features_NN
._.
The_DT
HtmlReport_NN
feature_NN
is_VPRT [BEMA]
really_EMPH
cool_PRED
._.
It_PIT
creates_VPRT
an_DT
HTML_NN
page_NN
with_PIN
all_QUAN
the_DT
benchmark_JJ
information_NOMZ
,_,
stats_NN
,_,
and_ANDC
charts_NN
generated_VBN [WZPAST]
by_PIN
JFreeChart_NN
._.
I_FPP1
'll_PRMD [CONT]
have_VB
a_DT
longer_RB
update_VB
when_RB
I_FPP1
've_VPRT [CONT]
finished_VBN
it_PIT
._.
I_FPP1
just_EMPH
ran_VBD
across_PLACE
a_DT
Java_NN
Benchmarking_GER
Framework_NN
called_VBD
JBench_NN
._.
I_FPP1
was_VBD [BEMA]
quite_RB
interested_PRED
since_OSUB
I_FPP1
have_VPRT [PEAS]
n't_XX0 [CONT]
tried_VBN
any_QUAN
official_JJ
benchmarking_GER
,_,
so_IN
I_FPP1
downloaded_VBD
and_PHC
reviewed_VBD
it_PIT
._.
It_PIT
's_VPRT [CONT] [BEMA]
not_XX0
a_DT
stand-alone_JJ
benchmarking_GER
tool_NN
like_IN
a_DT
CPU_NN
or_CC
graphics_NN
card_NN
benchmarker_NN
._.
It_PIT
is_VPRT [BEMA]
a_DT
framework_NN
similar_JJ
to_TO
JUnit_VB
that_DEMP
requires_VPRT [SUAV]
the_DT
programmer_NN
to_TO
put_VB
some_QUAN
thought_VBN [PRIV]
into_PIN
what_WP
they_TPP3
are_VPRT
testing_VBG
and_CC
actually_RB
write_VB [PUBV]
some_QUAN
code_NN
._.
Without_PIN
further_JJ
ado_NN
,_,
here_RB
's_POS
my_FPP1
review_NN
along_IN
with_PIN
some_QUAN
generic_JJ
benchmark_NN
testing_GER
notes_NN
._.
BENCHMARK_NN
TESTS_NN
---------------------------_JJ
Purpose_NN
of_PIN
Benchmark_NN
Tests_NN
The_DT
purpose_NN
of_PIN
benchmark_NN
tests_NN
is_VPRT
to_TO
determine_VB [SUAV] [PRIV]
how_RB [WHCL]
a_DT
certain_JJ
implementation_NOMZ
performs_VPRT
._.
Benchmark_NN
tests_NN
are_VPRT [SPAU] [PASS]
commonly_RB
used_VBN
to_TO
compare_VB
different_JJ
algorithms_NN
,_,
data_NN
structures_NN
,_,
implementation_NOMZ
,_,
etc._FW
against_PIN
each_QUAN
other_JJ
._.
Another_DT
benefit_NN
of_PIN
benchmark_NN
tests_NN
is_VPRT
to_TO
prove_VB [PRIV]
that_THVC
your_SPP2
implementation_NOMZ
is_VPRT [BEMA]
correct_PRED
for_PIN
the_DT
situation_NOMZ
._.
It_PIT
can_POMD
be_VB [PASS]
used_VBN
in_PIN
documentation_NOMZ
and_CC
to_TO
answer_VB
future_JJ
``_``
Why_RB [WHQU]
did_VBD
you_SPP2
do_VPRT [PROD]
it_PIT
that_DEMO
way_NN
?_.
''_''
questions_NOMZ
._.
Benchmarks_NN
are_VPRT [BEMA]
not_XX0
functional_JJ
tests_NN
._.
While_OSUB
they_TPP3
might_POMD
test_VB
some_QUAN
functionality_NOMZ
,_,
their_TPP3
main_JJ
purpose_NN
is_VPRT
not_XX0
to_TO
verify_VB
the_DT
functional_JJ
correctness_NOMZ
of_PIN
the_DT
code_NN
._.
Benchmarks_NN
are_VPRT
not_XX0
load_NN
or_CC
stress_NN
tests_NN
._.
While_OSUB
they_TPP3
put_VPRT
load_NN
and_PHC
stress_NN
on_PIN
the_DT
code_NN
,_,
their_TPP3
main_JJ
purpose_NN
is_VPRT
to_TO
test_VB
the_DT
speed_NN
of_PIN
the_DT
code_NN
and_CC
not_XX0
to_TO
test_VB
how_RB
the_DT
code_NN
handles_VPRT
a_DT
stress-induced_JJ
crash_NN
or_CC
how_RB
it_PIT
effects_NN
the_DT
system_NN
resources_NN
._.
Benchmarks_NN
are_VPRT
not_XX0
performance_NN
tests_NN
._.
They_TPP3
do_VPRT [PROD]
output_NN
performance_NN
statistics_NN
,_,
but_CC
those_DEMO
statistics_NN
are_VPRT [PASS]
not_XX0
used_VBN
to_TO
determine_VB [SUAV] [PRIV]
a_DT
pass\/fail_NN
of_PIN
the_DT
performance_NN
requirements_NOMZ
._.
Benchmark_NN
Purpose_NN
Examples_NN
Test_NN
performance_NN
of_PIN
code_NN
with_PIN
logging_VBG
at_PIN
different_JJ
levels_NN
._.
Test_NN
in-house_JJ
code_NN
against_PIN
third-party_JJ
code_NN
that_TSUB
does_VPRT [PROD]
something_QUPR
similar_JJ
._.
Test_NN
a_DT
generic_JJ
implementation_NOMZ
against_PIN
a_DT
specific_JJ
implementation_NOMZ
._.
Test_NN
an_DT
algorithm_NN
's_POS
efficiency_NN
with_PIN
different_JJ
parameters_NN
,_,
different_JJ
sizes_NN
,_,
etc._FW
._.
Test_NN
the_DT
same_JJ
code_NN
under_IN
different_JJ
resources_NN
-LRB-_-LRB-
JVMs_NN
,_,
OSs_NN
,_,
CPUs_NN
,_,
RAM_NN
sizes_NN
,_,
etc._FW
-RRB-_-RRB-
JBench_NN
JBench_NN
is_VPRT [BEMA]
a_DT
framework_NN
for_PIN
benchmarking_VBG
java_NN
code_NN
much_QUAN
in_PIN
the_DT
same_JJ
way_NN
that_TOBJ
JUnit_NN
is_VPRT [BEMA]
a_DT
framework_NN
for_PIN
unittesting_VBG
java_NN
code_NN
._.
To_TO
create_VB
a_DT
Benchmark_NN
test_NN
using_VBG [WZPRES]
the_DT
JBench_NN
framework_NN
,_,
create_VB
a_DT
class_NN
that_TSUB
implements_VPRT
the_DT
uk.org_NN
._.
skeet_NN
._.
jbench_NN
._.
BenchTask_NN
interface_NN
._.
Overwrite_NN
the_DT
constructor_NN
to_TO
do_VB [PROD]
one-time_JJ
setups_NN
,_,
checkConfiguration_NOMZ
-LRB-_-LRB-
-RRB-_-RRB-
to_TO
verify_VB
the_DT
data_NN
in_PIN
the_DT
properties_NN
file_NN
,_,
prepareTests_NN
-LRB-_-LRB-
-RRB-_-RRB-
for_PIN
setup_NN
that_TSUB
needs_VPRT
to_TO
be_VB [PASS]
done_VBN [PROD]
before_IN
the_DT
tests_NN
are_VPRT [PASS]
run_VBN
-LRB-_-LRB-
only_DWNT
called_VBN
once_TIME
per_PIN
task_NN
,_,
not_XX0
once_TIME
per_PIN
jbench_NN
._.
runs_NN
-RRB-_-RRB-
,_,
runTest_NN
-LRB-_-LRB-
-RRB-_-RRB-
to_TO [SPIN]
actually_RB
execute_VB
the_DT
code_NN
being_VBG [WZPRES] [PASS]
benchmarked_VBN
,_,
checkResults_NN
-LRB-_-LRB-
-RRB-_-RRB-
to_TO
do_VB [PROD]
any_QUAN
post-test_JJ
verification_NOMZ
,_,
and_ANDC
getDescription_NOMZ
that_TSUB
returns_VPRT
a_DT
String_GER
which_WDT [WHSUB]
is_VPRT [PASS]
printed_VBN
out_PIN
to_TO
describe_VB
the_DT
test_NN
being_VBG [WZPRES] [PASS]
run_VBN
._.
All_QUAN
variables_NN
defined_VBN [WZPAST]
for_PIN
the_DT
test_NN
in_PIN
the_DT
properties_NN
file_NN
should_NEMD
have_VB
a_DT
setVariable_JJ
-LRB-_-LRB-
-RRB-_-RRB-
method_NN
._.
All_QUAN
the_DT
test_NN
parameters_NN
and_PHC
scenarios_NN
are_VPRT [PASS]
defined_VBN
in_PIN
a_DT
properties_NN
file_VPRT
given_VBN
as_IN
a_DT
command-line_JJ
option_NOMZ
to_PIN
the_DT
JBench_NN
program_NN
._.
Some_QUAN
items_NN
listed_VBN [WZPAST]
in_PIN
this_DEMO
file_NN
is_VPRT
how_RB
many_QUAN
iterations_NOMZ
of_PIN
the_DT
runTest_JJ
function_NOMZ
is_VPRT [PASS]
done_VBN [PROD]
for_PIN
each_QUAN
test_NN
,_,
which_WDT [SERE]
classes_NN
are_VPRT [BEMA]
the_DT
benchmark_NN
tests_NN
along_IN
with_PIN
test_NN
variables_NN
,_,
and_ANDC
information_NOMZ
to_PIN
output_NN
._.
The_DT
same_JJ
test_NN
can_POMD
be_VB [PASS]
listed_VBN
twice_RB
with_PIN
different_JJ
variables_NN
which_WDT [WHSUB]
allows_VPRT [SUAV]
it_PIT
to_TO
be_VB [PASS]
benchmarked_VBN
in_PIN
different_JJ
ways_NN
._.
The_DT
one_CD
concern_NN
I_FPP1
have_VPRT
is_VPRT
that_DEMO
it_PIT
has_VPRT [PEAS]
n't_XX0 [CONT]
been_VBN [PASS]
developed_VBN
for_PIN
3_CD
years_NN
._.
There_EX
is_VPRT [SPAU]
only_DWNT
mention_VB [PUBV]
of_PIN
java_NN
1.1_CD
and_CC
1.2_CD
on_PIN
the_DT
website_NN
,_,
so_IN
the_DT
behavior_NN
on_PIN
1.3_CD
and_CC
1.4_CD
is_VPRT [BEMA]
unknown_PRED
._.
Also_RB
,_,
operating_VBG
systems_NN
that_TSUB
have_VPRT [PEAS]
been_VBN [PASS]
developed_VBN
in_PIN
the_DT
past_JJ
3_CD
years_NN
-LRB-_-LRB-
Linux_NN
2.6_CD
kernel_NN
,_,
Solaris_NN
9_CD
,_,
Windows_VPRT
XP_NN
-RRB-_-RRB-
might_POMD
produce_VB
unknown_JJ
behavior_NN
._.
Judging_VBG [PRIV] [PRESP]
by_PIN
the_DT
small_JJ
examples_NN
I_FPP1
have_VPRT [PEAS]
done_VBN [PROD]
-LRB-_-LRB-
java_NN
1.4_CD
on_PIN
Linux_NN
2.6_CD
kernel_NN
-RRB-_-RRB-
,_,
it_PIT
seems_VPRT [SMP]
to_TO
perform_VB
correctly_RB
._.
Website_NN
:_:
http:\/\/www.yoda.arachsys.com\/java\/jbench\/_VB
JBench_NN
Output_NN
Analysis_NN
Before_IN
the_DT
tests_NN
are_VPRT [PASS]
run_VBN
,_,
data_NN
is_VPRT [PASS]
printed_VBN
out_PIN
on_PIN
the_DT
environment_NOMZ
,_,
like_IN
the_DT
JVM_NN
,_,
OS_NN
,_,
and_ANDC
JRE_NN
used_VBD
._.
This_DEMO
data_NN
can_POMD
be_VB [PASS]
used_VBN
to_TO
distinguish_VB
between_PIN
tests_NN
where_RB
those_DEMO
parameters_NN
change_VPRT
._.
Next_IN
the_DT
data_NN
for_PIN
each_QUAN
test_NN
is_VPRT [PASS]
printed_VBN
out_PIN [STPR]
._.
This_DEMP
includes_VPRT
a_DT
description_NOMZ
of_PIN
the_DT
test_NN
,_,
the_DT
result_NN
of_PIN
the_DT
test_NN
,_,
and_ANDC
if_COND
successful_JJ
,_,
the_DT
time_NN
it_PIT
took_VBD
for_PIN
each_QUAN
test_NN
iteration_NOMZ
-LRB-_-LRB-
specified_VBN [PASTP]
by_PIN
jbench_NN
._.
runs_NN
-RRB-_-RRB-
._.
At_PIN
the_DT
bottom_NN
of_PIN
each_QUAN
test_NN
is_VPRT [BEMA]
the_DT
mean_NN
,_,
variance_NN
,_,
and_ANDC
standard_JJ
deviation_NOMZ
._.
To_TO
give_VB
a_DT
quick_JJ
refresher_NN
of_PIN
the_DT
terms_NN
:_:
-_:
The_DT
mean_NN
of_PIN
a_DT
data_NN
set_NN
is_VPRT [BEMA]
simply_RB
the_DT
arithmetic_NN
average_NN
of_PIN
the_DT
values_NN
in_PIN
the_DT
set_NN
,_,
obtained_VBN [PASTP]
by_PIN
summing_VBG
the_DT
values_NN
and_CC
dividing_VBG
by_PIN
the_DT
number_NN
of_PIN
values_NN
._.
-_:
The_DT
variance_NN
of_PIN
a_DT
data_NN
set_NN
is_VPRT [BEMA]
the_DT
arithmetic_NN
average_NN
of_PIN
the_DT
squared_VBN
differences_NN
between_PIN
the_DT
values_NN
and_CC
the_DT
mean_NN
._.
-_:
The_DT
standard_JJ
deviation_NOMZ
is_VPRT [BEMA]
the_DT
square_JJ
root_NN
of_PIN
the_DT
variance_NN
The_DT
mean_NN
is_VPRT [BEMA]
a_DT
measure_NN
of_PIN
the_DT
center_NN
of_PIN
the_DT
distribution_NOMZ
._.
The_DT
variance_NN
and_CC
the_DT
standard_JJ
deviation_NOMZ
are_VPRT [BEMA]
both_DT
measures_NN
of_PIN
the_DT
spread_NN
of_PIN
the_DT
distribution_NOMZ
about_IN
the_DT
mean_NN
._.
For_PIN
benchmarking_VBG
purposes_NN
,_,
the_DT
smaller_JJ
the_DT
mean_NN
the_DT
better_JJ
-LRB-_-LRB-
i.e._CONJ
the_DT
faster_RB
the_DT
code_NN
executed_VBN
-RRB-_-RRB-
,_,
and_ANDC
the_DT
smaller_JJ
the_DT
standard_JJ
deviation_NOMZ
the_DT
better_JJ
._.
A_DT
large_JJ
standard_JJ
deviation_NOMZ
indicates_VPRT [PRIV]
that_THVC
the_DT
function_NOMZ
is_VPRT [BEMA]
inconsistant_PRED
,_,
the_DT
testing_GER
platform_NN
is_VPRT [BEMA]
unstable_PRED
,_,
or_CC
other_JJ
events_NN
are_VPRT
occuring_VBG
regularly_RB
like_IN
garbage_NN
collection_NOMZ
._.
Benchmark_NN
Coding_GER
Standards_NN
-LRB-_-LRB-
my_FPP1
personal_JJ
preferences_NN
-RRB-_-RRB-
The_DT
benchmark_NN
tests_NN
should_NEMD
be_VB [PASS]
kept_VBN
in_PIN
a_DT
seperate_JJ
directory_NN
structure_NN
that_DEMP
is_VPRT [BEMA]
parallel_PRED
to_PIN
the_DT
source_NN
tree_NN
._.
No_SYNE
test_NN
code_NN
,_,
including_VBG
benchmark_NN
tests_NN
,_,
should_NEMD
be_VB [PASS]
kept_VBN
in_PIN
the_DT
same_JJ
location_NOMZ
or_CC
file_NN
as_IN
production_NOMZ
code_NN
._.
All_QUAN
configuration_NOMZ
files_NN
,_,
libs_NN
,_,
and_ANDC
all_QUAN
other_JJ
supporting_VBG
files_NN
should_NEMD [SPAU]
also_RB
be_VB [PASS]
kept_VBN
under_IN
this_DEMO
seperate_JJ
and_PHC
parallel_JJ
directory_NN
structure_NN
._.
The_DT
test_NN
class_NN
should_NEMD
be_VB [PASS]
named_VBN
the_DT
same_JJ
as_IN
the_DT
class_NN
it_PIT
is_VPRT
benchmarking_VBG
,_,
but_CC
appended_VBN
with_PIN
JBench_NN
-LRB-_-LRB-
i.e._CONJ
ListJBench_NN
-RRB-_-RRB-
._.
If_COND
the_DT
test_NN
class_NN
is_VPRT [SPAU]
only_DWNT
testing_VBG
a_DT
function_NOMZ
or_CC
specific_JJ
functionality_NOMZ
of_PIN
that_DEMO
class_NN
,_,
then_RB
it_PIT
should_NEMD
be_VB [PASS]
named_VBN
approprietly_RB
-LRB-_-LRB-
i.e._CONJ
Class_NN
-RRB-_-RRB-
._.
Note_VB [PRIV]
that_THVC
if_COND
a_DT
different_JJ
framework_NN
is_VPRT [PASS]
used_VBN
for_PIN
benchmarking_VBG
,_,
then_RB
a_DT
unique_JJ
name_NN
for_PIN
that_DEMO
framework_NN
should_NEMD
be_VB [PASS]
appended_VBN
instead_CONJ
of_NULL
JBench_NN
._.
Example_NN
Setup_NN
:_:
root_NN
\/_NN
-LRB-_-LRB-
src_FW
,_,
conf_NN
,_,
lib_NN
-RRB-_-RRB-
root\/src\/com_NN
\/_CD
jake\/commons\/datastructure_NN
\/_CD
ReadWriteLock_NN
._.
java_NN
root\/bench\/lib_NN
\/_NN
jbench-0_JJ
.61_CD
._.
jar_NN
root\/bench\/conf_NN
\/_NN
datastructure_NN
._.
jbench_JJ
root\/bench\/src_NN
\/_NN
com\/jake\/commons_NN
\/_VPRT
datastructure\/ReadWriteLockJBench_NN
._.
java_NN
root\/bench\/src_NN
\/_NN
com\/jake\/commons_NN
\/_VPRT
datastructure\/ReadWriteLock_NN
_NN
allWritersJBench_NN
._.
java_NN
JBench_NN
Example_NN
Run_NN
LD_NN
=_SYM
benchmark\/shlib\/linux_FW
java_FW
-_:
Xruncputimer_NN
-_:
classpath_NN
$_$
CLASSPATH_CD
:_:
\/_VB
home\/jake\/IdeaProjects_NN
\/_VB
examples\/target\/test-classes_NN
:_:
\/_VB
home\/jake\/IdeaProjects_NN
\/_VB
examples\/target\/classes_NN
:_:
\/_VB
home\/jewerdt\/IdeaProjects_NN
\/_FW
examples\/benchmark\/lib_FW
\/_FW
jbench-0_JJ
.61_CD
._.
jar_NN
uk.org_NN
._.
skeet_NN
._.
jbench_NN
._.
JBench_NN
benchmark\/conf\/datastructure_NN
._.
jbench_NN
Here_RB
's_VPRT [CONT] [BEMA]
an_DT
example_NN
of_PIN
the_DT
diagram_NN
below_PLACE
in_PIN
a_DT
Use_NN
Case_NN
instead_CONJ
of_NULL
Sequence_NN
format_NN
._.
There_EX
is_VPRT
a_DT
little_RB
more_EMPH
information_NOMZ
in_PIN
it_PIT
,_,
but_CC
as_IN
you_SPP2
can_POMD
see_VB [PRIV]
the_DT
readability_NOMZ
and_PHC
comprehension_NN
is_VPRT [BEMA]
much_QUAN
lower_JJ
._.
Ok_NN
,_,
I_FPP1
experimented_VBD
a_DT
bit_NN
with_PIN
diagramming_VBG
the_DT
development_NOMZ
process_NN
of_PIN
a_DT
new_JJ
feature_NN
to_PIN
an_DT
existing_VBG
system_NN
._.
The_DT
UML_NN
diagram_NN
that_TSUB
worked_VBD
the_DT
best_JJ
for_PIN
me_FPP1
was_VBD [BEMA]
a_DT
Sequence_NN
Diagram_NN
._.
Maybe_HDG
I_FPP1
'll_PRMD [CONT]
post_VB
some_QUAN
of_PIN
the_DT
other_JJ
UML_NN
diagrams_NN
for_PIN
a_DT
compare\/contrast_NN
._.
There_EX
is_VPRT
a_DT
ton_NN
of_PIN
information_NOMZ
left_VBD
out_PIN
like_IN
what_WP
the_DT
requirements_NOMZ
and_PHC
specs_NN
should_NEMD
contain_VB
,_,
the_DT
different_JJ
types_NN
of_PIN
developer_NN
and_PHC
QA_NN
tests_NN
,_,
and_ANDC
integration_NOMZ
of_PIN
the_DT
feature_NN
into_PIN
the_DT
existing_VBG
product_NN
,_,
infrastructure_NN
and_CC
build_VB
systems_NN
._.
I_FPP1
think_VPRT [PRIV]
accompaning_VBG
the_DT
diagram_NN
with_PIN
a_DT
checklist_NN
-LRB-_-LRB-
pdf_NN
-RRB-_-RRB-
of_PIN
tasks_NN
and_PHC
tasks_NN
'_POS
tasks_NN
is_VPRT [BEMA]
the_DT
next_JJ
step_NN
._.
CLICK_NN
the_DT
image_NN
for_PIN
a_DT
larger_JJ
and_PHC
readable_JJ
picture_NN
A_DT
nice_JJ
site_NN
with_PIN
examples_NN
of_PIN
the_DT
different_JJ
types_NN
of_PIN
UML_NN
diagrams_NN
:_:
SmartDraw_NN
UML_NN
Center_NN
This_DEMP
was_VBD
going_VBG
to_TO
be_VB [BEMA]
a_DT
post_NN
of_PIN
how_RB
to_TO
tell_VB
when_RB
you_SPP2
or_CC
someone_QUPR
else_RB
is_VPRT [SPAU] [PASS]
actually_RB
done_VBN [PROD]
with_PIN
a_DT
task_NN
._.
However_CONJ
,_,
I_FPP1
am_VPRT
going_VBG
to_TO
expand_VB
more_EMPH
to_TO
cover_VB
the_DT
entire_JJ
process_NN
,_,
albeit_IN
quite_RB
undetailed_JJ
,_,
for_PIN
both_DT
a_DT
development_NOMZ
and_CC
a_DT
testing_GER
scenario_NN
._.
One_CD
issue_NN
that_TSUB
comes_VPRT
up_RP
is_VPRT [BEMA]
the_DT
difference_NN
between_PIN
a_DT
project_NN
and_CC
a_DT
task_NN
-LRB-_-LRB-
what_WP [WHQU]
is_VPRT [BEMA]
a_DT
task_NN
to_PIN
one_CD
person_NN
can_POMD
be_VB [BEMA]
a_DT
project_NN
to_PIN
another_DT
person_NN
-RRB-_-RRB-
and_ANDC
realizing_VBG [PRIV] [THATD]
that_DEMP
-_:
done_VBN
-_:
and_ANDC
different_JJ
percentages_NN
of_PIN
-_:
done_VBN
-_:
can_POMD
be_VB [BEMA]
different_PRED
in_PIN
each_QUAN
case_NN
._.
This_DEMP
is_VPRT [BEMA]
also_RB
recursive_PRED
,_,
so_IN
each_QUAN
checkpoint_NN
of_PIN
done-ness_NOMZ
of_PIN
the_DT
project_NN
has_VPRT
to_TO
be_VB
-_:
done_VBN
-_:
and_ANDC
therefore_CONJ
needs_VPRT
it_PIT
's_VPRT [CONT] [BEMA]
own_JJ
checkpoints_NN
of_PIN
done-ness_NOMZ
._.
I_FPP1
suppose_VPRT [PRIV]
at_PIN
a_DT
certain_JJ
point_NN
,_,
the_DT
task_NN
will_PRMD
be_VB [BEMA]
small\/independent_JJ
enough_RB
that_DEMO
it_PIT
ca_POMD
n't_XX0 [CONT]
be_VB [PASS]
considered_VBN [PRIV]
a_DT
project_NN
._.
At_PIN
this_DEMO
point_NN
the_DT
person_NN
responsible_JJ
for_PIN
the_DT
task_NN
can_POMD
say_VB [PUBV]
-LRB-_-LRB-
and_ANDC
be_VB [PASS]
trusted_VBN
-RRB-_-RRB-
how_RB
close_RB
the_DT
task_NN
is_VPRT
to_TO
being_VBG [PASS]
finished_VBN
._.
This_DEMO
first_JJ
scenario_NN
is_VPRT [BEMA]
for_PIN
a_DT
significant_JJ
addition_NOMZ
or_CC
change_NN
to_PIN
an_DT
existing_VBG
system_NN
._.
With_PIN
a_DT
little_JJ
tweaking_GER
,_,
this_DEMP
can_POMD [SPAU]
probably_RB
be_VB [PASS]
adapted_VBN
to_PIN
an_DT
entirely_AMP
new_JJ
system_NN
._.
Below_NN
is_VPRT [BEMA]
the_DT
breakdown_NN
of_PIN
the_DT
various_JJ
parts_NN
of_PIN
the_DT
process_NN
with_PIN
percentages_NN
-LRB-_-LRB-
of_PIN
-_:
done_VBN
-_:
-RRB-_-RRB-
assigned_VBN [PASTP]
to_PIN
the_DT
completion_NOMZ
of_PIN
each_QUAN
process_NN
._.
I_FPP1
would_PRMD [SPAU]
really_EMPH
like_VB
to_TO
break_VB
down_RP
each_QUAN
section_NOMZ
individually_RB
and_CC
create_VB
a_DT
chart_NN
like_IN
this_DEMP
based_VBN
on_PIN
only_DWNT
that_DEMO
section_NOMZ
-LRB-_-LRB-
and_ANDC
recursive_JJ
-RRB-_-RRB-
,_,
but_CC
this_DEMP
will_PRMD
do_VB
for_PIN
now_TIME
._.
10_CD
%_NN
-_:
Requirements_NOMZ
are_VPRT [PASS]
finalized_VBN
and_PHC
signed_VBN
off_PIN
on_PIN [STPR]
._.
20_CD
%_NN
-_:
Development_NOMZ
planning_GER
is_VPRT [PASS]
done_VBN
and_PHC
documented_VBN
,_,
with_PIN
appropriate_JJ
diagrams_NN
and_CC
additional_JJ
specs_NN
-LRB-_-LRB-
or_CC
additions_NOMZ
to_PIN
the_DT
original_JJ
spec_NN
-RRB-_-RRB-
._.
These_DEMO
specs_NN
should_NEMD [SPAU]
also_RB
include_VB
boundary_NN
cases_NN
and_PHC
testing_GER
cases\/ideas\/areas_NN
and_PHC
performance_NN
requirement\/expectations_NOMZ
._.
30_CD
%_NN
-_:
Development_NOMZ
is_VPRT [PASS]
done_VBN [PROD]
-LRB-_-LRB-
phase_NN
1_CD
-RRB-_-RRB-
._.
40_CD
%_NN
-_:
Developer_NN
tests_NN
are_VPRT [PASS]
done_VBN [PROD]
-LRB-_-LRB-
unit_NN
tests_NN
in_PIN
the_DT
90-100_CD
%_NN
code_NN
coverage_NN
range_NN
-RRB-_-RRB-
and_ANDC
signed_VBD
off_PIN
on_PIN
by_PIN
QA_NN
._.
QA_NN
should_NEMD
sign_VB
off_PIN
that_DEMO
the_DT
test_NN
cases_NN
are_VPRT [BEMA]
thorough_PRED
,_,
developed_VBD
according_VBG
to_TO
set_VB
standards_NN
and_PHC
conventions_NOMZ
,_,
are_VPRT [BEMA]
easily_RB
runnable_PRED
,_,
and_ANDC
actually_RB
work_NN
._.
50_CD
%_NN
-_:
QA_NN
writes_VPRT [PUBV]
tests_NN
for_PIN
the_DT
developed_VBN
piece_NN
._.
Depending_VBG [PRESP]
on_PIN
the_DT
size\/function_NOMZ
of_PIN
what_WP
was_VBD [PASS]
developed_VBN
,_,
a_DT
separate_JJ
functional_JJ
test_NN
can_POMD
be_VB [PASS]
written_VBN [PUBV]
for_PIN
the_DT
piece_NN
,_,
otherwise_CONJ
it_PIT
can_POMD
be_VB [PASS]
combined_VBN
into_PIN
existing_VBG
functional_JJ
tests_NN
._.
Performance_NN
tests_NN
should_NEMD [SPAU]
also_RB
be_VB [PASS]
written_VBN [PUBV]
if_COND
any_QUAN
performance_NN
specs_NN
were_VBD [PASS]
given_VBN
._.
60_CD
%_NN
-_:
Development_NOMZ
is_VPRT [PASS]
done_VBN
with_PIN
incorporating_VBG
QA_NN
bugs_NN
,_,
suggestions_NOMZ
,_,
changes_NN
-LRB-_-LRB-
phase_NN
2_CD
-RRB-_-RRB-
._.
70_CD
%_NN
-_:
QA_NN
verifies_VPRT
phase_NN
2_CD
of_PIN
development_NOMZ
._.
This_DEMO
step_NN
and_CC
the_DT
previous_JJ
step_NN
should_NEMD
be_VB [PASS]
repeated_VBN [PUBV]
as_RB
often_RB
as_IN
needed_VBN
._.
QA_NN
then_RB
integrates_VPRT
the_DT
piece_NN
into_PIN
the_DT
current_JJ
acceptance_NN
,_,
regression_NN
,_,
load_NN
,_,
etc._FW
tests_NN
and\/or_CC
writes_VPRT [PUBV]
new_JJ
ones_NN
for_PIN
the_DT
piece_NN
._.
80_CD
%_NN
-_:
Development_NOMZ
is_VPRT [PASS]
done_EMPH
incorporating_VBG
QA_NN
bugs_NN
,_,
suggestions_NOMZ
,_,
changes_NN
-LRB-_-LRB-
phase_NN
3_CD
-RRB-_-RRB-
._.
90_CD
%_NN
-_:
QA_NN
verifies_NN
and_PHC
signs_NN
off_PIN
on_PIN
phase_NN
3_CD
of_PIN
development_NOMZ
._.
The_DT
previous_JJ
step_NN
should_NEMD
be_VB [PASS]
repeated_VBN [PUBV]
as_RB
often_RB
as_IN
needed_VBN
._.
100_CD
%_NN
-_:
Documentation_NOMZ
is_VPRT [BYPA]
completed_VBN
by_PIN
the_DT
developer_NN
,_,
which_WDT [SERE]
includes_VPRT
javadocs_NN
,_,
updating_VBG
current_JJ
documentation_NOMZ
,_,
and_ANDC
updating_VBG
the_DT
original_JJ
specs_NN
and_PHC
requirements_NOMZ
with_PIN
the_DT
information_NOMZ
on_PIN
how_RB
the_DT
final_JJ
product_NN
is_VPRT [BEMA]
different_PRED
._.
The_DT
project_NN
manager_NN
analyzes_VPRT
the_DT
project_NN
for_PIN
information_NOMZ
like_IN
how_RB
accurate_JJ
the_DT
time_NN
estimates_NN
were_VBD
,_,
where_RB
the_DT
problems_NN
occurred_VBD
,_,
etc._FW
._.
The_DT
second_JJ
scenario_NN
is_VPRT [BEMA]
for_PIN
a_DT
post-production_JJ
bug_NN
fix_NN
or_CC
small_JJ
change_NN
request_NN
-LRB-_-LRB-
will_PRMD
be_VB [PASS]
referred_VBN
to_PIN
as_IN
a_DT
bug_NN
for_PIN
this_DEMO
example_NN
-RRB-_-RRB-
._.
One_CD
thing_NN
to_TO
keep_VB
in_PIN
mind_NN
here_RB
is_VPRT
that_DEMO
not_XX0
everyone_QUPR
is_VPRT [PASS]
tasked_VBN
100_CD
%_NN
for_PIN
the_DT
duration_NOMZ
of_PIN
the_DT
project_NN
,_,
however_CONJ
it_PIT
is_VPRT
not_XX0
always_RB
safe_PRED
to_PIN
task_NN
them_TPP3
on_PIN
a_DT
different_JJ
project_NN
as_IN
they_TPP3
may_POMD
be_VB [PASS]
needed_VBN
back_RB
at_PIN
the_DT
current_JJ
project_NN
in_PIN
the_DT
future_NN
._.
10_CD
%_NN
-_:
Complete_JJ
description_NOMZ
of_PIN
the_DT
bug_NN
,_,
symptoms_NN
,_,
and_ANDC
how_RB
to_TO
tell_VB
it_PIT
has_VPRT [PEAS]
been_VBN [PASS]
fixed_VBN
._.
20_CD
%_NN
-_:
QA_NN
duplicates_VPRT
the_DT
bug_NN
and_CC
writes_VPRT [PUBV]
test_NN
that_TSUB
can_POMD
be_VB [PASS]
used_VBN
to_TO [SPIN]
automatically_RB
duplicate_VB
the_DT
bug_NN
._.
The_DT
test_NN
should_NEMD
be_VB [PASS]
written_VBN [PUBV]
to_TO
give_VB
the_DT
developer_NN
specific_JJ
steps_NN
taken_VBN
,_,
log_VB
files_NN
,_,
thread_NN
dumps_NN
,_,
performance_NN
statistics_NN
,_,
and_ANDC
whatever_WDT
else_RB
is_VPRT [PASS]
needed_VBN
._.
30_CD
%_NN
-_:
Developer_NN
analyzes_VPRT
bug_NN
description_NOMZ
,_,
gives_VPRT
written_VBN [PUBV]
analysis_NN
of_PIN
what_WP
is_VPRT
causing_VBG
the_DT
bug_NN
and_ANDC
what_WP
will_PRMD
be_VB [PASS]
involved_VBN
-LRB-_-LRB-
resources_NN
,_,
schedule_NN
estimate_NN
,_,
possible_JJ
side-effects_NN
-RRB-_-RRB-
to_TO
fix_VB
the_DT
bug_NN
._.
40_CD
%_NN
-_:
QA_NN
analyzes_VPRT
the_DT
bug_NN
description_NOMZ
and_CC
the_DT
developer_NN
's_POS
analysis_NN
,_,
and_ANDC
gives_VPRT
written_VBN [PUBV]
analysis_NN
on_PIN
what_WP
will_PRMD
be_VB [PASS]
involved_VBN
-LRB-_-LRB-
resources_NN
,_,
schedule_NN
estimates_NN
-RRB-_-RRB-
to_TO
verify_VB
the_DT
bug_NN
._.
50_CD
%_NN
-_:
Sign_NN
off_PIN
by_PIN
BIZ_NN
,_,
DEV_NN
,_,
and_ANDC
QA_NN
to_TO
commit_VB
to_PIN
the_DT
fixing_VBG
of_PIN
the_DT
bug_NN
._.
60_CD
%_NN
-_:
Development_NOMZ
planning_GER
is_VPRT [PASS]
done_VBN
and_PHC
documented_VBN
,_,
with_PIN
appropriate_JJ
diagrams_NN
and_CC
additional_JJ
specs_NN
._.
If_COND
this_DEMO
bug_NN
fix_NN
will_PRMD
change_VB
something_QUPR
specified_VBN [WZPAST]
in_PIN
a_DT
previous_JJ
spec_NN
,_,
doc_NN
,_,
or_CC
diagram_NN
,_,
an_DT
addendum_NN
should_NEMD
be_VB [PASS]
made_VBN
to_PIN
that_DEMO
documentation_NOMZ
._.
These_DEMO
specs_NN
should_NEMD [SPAU]
also_RB
include_VB
boundary_NN
cases_NN
and_PHC
testing_GER
cases\/ideas\/areas_NN
and_PHC
performance_NN
requirement\/expectations_NOMZ
._.
70_CD
%_NN
-_:
QA_NN
runs_VPRT
verification_NOMZ
test_NN
,_,
writes_VPRT [PUBV]
additional_JJ
tests_NN
as_IN
needed_VBN
,_,
and_ANDC
incorporates_VPRT
change_NN
into_PIN
current_JJ
tests_NN
._.
This_DEMO
step_NN
and_CC
the_DT
previous_JJ
step_NN
should_NEMD
be_VB [PASS]
repeated_VBN [PUBV]
as_RB
often_RB
as_IN
needed_VBN
._.
80_CD
%_NN
-_:
Documentation_NOMZ
is_VPRT [BYPA]
completed_VBN
by_PIN
the_DT
developer_NN
,_,
which_WDT [SERE]
includes_VPRT
javadocs_NN
,_,
updating_VBG
current_JJ
documentation_NOMZ
,_,
and_ANDC
updating_VBG
the_DT
original_JJ
specs_NN
and_PHC
requirements_NOMZ
with_PIN
the_DT
information_NOMZ
on_PIN
how_RB
the_DT
final_JJ
product_NN
is_VPRT [BEMA]
different_PRED
._.
The_DT
project_NN
manager_NN
analyzes_VPRT
the_DT
project_NN
for_PIN
information_NOMZ
like_IN
how_RB
accurate_JJ
the_DT
time_NN
estimates_NN
were_VBD
,_,
where_RB
the_DT
problems_NN
occurred_VBD
,_,
etc._FW
._.
100_CD
%_NN
-_:
A_DT
new_JJ
build_VB
of_PIN
the_DT
software_NN
is_VPRT [PASS]
completed_VBN
and_PHC
released_VBN
successfully_RB
._.
I_FPP1
seem_VPRT [SMP]
to_TO
have_VB [PEAS]
opened_VBN
a_DT
can_POMD
of_PIN
worms_NN
that_TOBJ
I_FPP1
do_VPRT
n't_XX0 [CONT]
know_VB [PRIV]
how_RB [WHCL]
to_TO
get_VB
myself_FPP1
out_PIN
of_PIN [STPR]
._.
I_FPP1
'll_PRMD [CONT] [SPAU]
awkwardly_RB
end_VB
the_DT
post_NN
here_RB
,_,
but_CC
I_FPP1
'll_PRMD [CONT] [SPAU]
probably_RB
re-visit_VB
this_DEMO
topic_NN
after_IN
I_FPP1
have_VPRT [PEAS]
covered_VBN
other_JJ
topics_NN
._.
writing_VBG [PUBV] [THATD] [PRESP]
this_DEMP
gives_VPRT
me_FPP1
other_JJ
ideas_NN
for_PIN
blogs_NN
._.
-_:
What_WP
makes_VPRT
good_JJ
requirements_NOMZ
,_,
differentiated_VBN [PASTP]
by_PIN
the_DT
size_NN
and_PHC
function_NOMZ
of_PIN
what_WP
is_VPRT
being_VBG [PASS]
developed_VBN
._.
-_:
What_WP
determines_VPRT [SUAV] [PRIV]
well-written_JJ
developer_NN
tests_NN
._.
Coding_VBG
conventions_NOMZ
,_,
non-dependence_NN
on_PIN
other_JJ
units_NN
,_,
boundary_NN
cases_NN
,_,
negative_JJ
tests_NN
,_,
etc._FW
-_:
Expand_VB
on_PIN
the_DT
project_NN
lifecycle_NN
._.
Mark_NN
tasks_NN
as_IN
BIZ_NN
,_,
DEV_NN
,_,
DOC_NN
,_,
and_ANDC
QA_NN
._.
Mark_NN
tasks_NN
as_IN
optional_JJ
if_COND
needed_VBN
._.
-_:
Create_VB
a_DT
project_NN
checklist_NN
that_TSUB
can_POMD
be_VB [PASS]
used_VBN
-LRB-_-LRB-
and_ANDC
customized_VBN
according_VBG
to_TO
project\/task_VB
-RRB-_-RRB-
._.
-_:
A_DT
UML_NN
Use-Case_NN
diagram_NN
for_PIN
different_JJ
development_NOMZ
processes_NN
._.
Inspiration_NOMZ
for_PIN
this_DEMO
blog_NN
was_VBD [BEMA]
from_PIN
this_DEMO
article_NN
:_:
StickyMinds_NN
-_:
When_RB [WHQU]
is_VPRT [PASS]
Done_VBN [SPAU]
Really_EMPH
Done_VBN
?_.
This_DEMP
is_VPRT [BEMA]
my_FPP1
first_JJ
time_NN
writting_VBG [WZPRES]
a_DT
blog_NN
._.
The_DT
blogs_NN
I_FPP1
write_VPRT [PUBV]
here_RB
will_PRMD [SPAU]
mainly_RB
focus_VB
on_PIN
the_DT
problems_NN
I_FPP1
see_VPRT [PRIV]
at_PIN
work_NN
-LRB-_-LRB-
and_ANDC
am_VB
trying_VBG
to_TO
fix_VB
-RRB-_-RRB-
and_ANDC
the_DT
good_JJ
things_NN
I_FPP1
see_VPRT [PRIV]
at_PIN
work_NN
that_TOBJ
I_FPP1
want_VPRT
to_TO
write_VB [PUBV]
about_IN
for_PIN
future_JJ
reference_NN
._.
I_FPP1
do_VPRT
n't_XX0 [CONT]
have_VB
any_QUAN
expectations_NOMZ
for_PIN
this_DEMO
blog_NN
besides_PIN
personal_JJ
use_NN
-LRB-_-LRB-
I_FPP1
have_VPRT
a_DT
bad_JJ
memory_NN
,_,
so_EMPH
writting_JJ
my_FPP1
thoughts_NN
down_IN
helps_VPRT
me_FPP1
remember_VB [PRIV]
them_TPP3
later_TIME
-RRB-_-RRB-
._.
However_CONJ
,_,
if_COND
I_FPP1
write_VPRT [PUBV]
an_DT
astoundingly_RB
good_JJ
blog_NN
,_,
I_FPP1
might_POMD
rewrite_VB
it_PIT
as_IN
an_DT
article_NN
and_CC
submit_VB [PUBV]
it_PIT
to_PIN
a_DT
web_NN
site_NN
or_CC
magazine_NN
._.
Who_WP
knows_VPRT [PRIV]
?_.
