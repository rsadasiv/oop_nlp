Testing_NNP Java_NNP classes_NNS that_WDT have_VBP a_DT main_JJ function_NN -LRB-_-LRB- i.e._FW they_PRP 're_VBP meant_VBN to_TO be_VB run_VBN from_IN the_DT command_NN line_NN -RRB-_-RRB- can_MD be_VB a_DT bit_NN tricky_JJ ._.
Most_JJS main_JJ functions_NNS print_VBP to_TO the_DT standard_NN out_IN and_CC err_VB streams_NNS and_CC call_VB System_NNP ._.
exit_NN -LRB-_-LRB- 1_CD -RRB-_-RRB- if_IN something_NN goes_VBZ wrong_JJ ._.
In_IN order_NN to_TO test_VB the_DT correct_JJ functionality_NN of_IN the_DT method_NN for_IN all_DT conditionals_NNS ,_, the_DT test_NN method_NN is_VBZ going_VBG to_TO have_VB to_TO read_VB the_DT output_NN streams_NNS and_CC prevent_VB System_NNP ._.
exit_NN from_IN ending_VBG the_DT test_NN itself_PRP ._.
The_DT solutions_NNS given_VBN here_RB are_VBP generalized_VBN for_IN most_JJS main_JJ functions_NNS ,_, but_CC will_MD work_VB on_IN other_JJ code_NN that_WDT has_VBZ System_NN ._.
out_RB ,_, System_NNP ._.
err_VB ,_, or_CC System_NNP ._.
exit_NN calls_NNS ._.
Hopefully_RB the_DT code_NN below_IN is_VBZ mostly_RB self-explanitory_JJ ._.
The_DT output_NN streams_NNS are_VBP captured_VBN by_IN calling_VBG the_DT System_NNP ._.
setOut_NNP and_CC System_NNP ._.
setErr_NN methods_NNS ._.
The_DT output_NN to_TO those_DT streams_NNS are_VBP stored_VBN in_IN ByteArrayOutputStreams_NNP which_WDT are_VBP easily_RB converted_VBN into_IN Strings_NNP by_IN using_VBG the_DT toString_VBG method_NN ._.
You_PRP should_MD usually_RB test_VB for_IN both_DT expecting_VBG and_CC not_RB expecting_VBG error_NN and_CC output_NN ._.
If_IN you_PRP know_VBP the_DT exact_JJ error_NN or_CC output_NN that_WDT is_VBZ expected_VBN ,_, or_CC even_RB a_DT phrase_NN or_CC keyword_NN ,_, that_WDT should_MD be_VB tested_VBN for_IN also_RB ._.
The_DT System_NNP ._.
exit_NN is_VBZ handled_VBN by_IN setting_VBG a_DT restrictive_JJ security_NN policy_NN ._.
This_DT can_MD be_VB done_VBN using_VBG Java_NNP 's_POS security_NN ._.
policy_NN file_NN -LRB-_-LRB- I_PRP think_VBP ..._: -RRB-_-RRB- ,_, but_CC it_PRP is_VBZ more_RBR verbose_JJ and_CC manipulatable_JJ to_TO set_VB the_DT JVM_NNP 's_POS SecurityManager_NNP class_NN ._.
I_PRP create_VBP an_DT anonymous_JJ inner_JJ class_NN that_WDT overwrites_VBZ the_DT checkExit_NNP function_NN and_CC throws_VBZ a_DT SecurityException_NNP in_IN every_DT case_NN ._.
I_PRP also_RB reset_VB the_DT JVM_NNP 's_POS SecurityManager_NNP back_RB to_TO the_DT original_JJ one_CD after_IN the_DT test_NN is_VBZ done_VBN to_TO prevent_VB any_DT unintentional_JJ side_NN effects_NNS from_IN the_DT test_NN method_NN ._.
public_JJ class_NN MainFunctionTest_NNP extends_VBZ TestCase_NNP -LCB-_-LRB- ByteArrayOutputStream_NNP out_IN ;_: ByteArrayOutputStream_NNP err_VB ;_: \/_CD \*\*_SYM \*_SYM Sets_NNPS up_IN the_DT fixture_NN by_IN creating_VBG System_NNP ._.
out_RB and_CC System_NNP ._.
err_VB redirects_NNS ._.
\*_SYM This_DT method_NN is_VBZ called_VBN before_IN a_DT test_NN is_VBZ executed_VBN ._.
\*_SYM \/_NN protected_VBN void_JJ setUp_NNP -LRB-_-LRB- -RRB-_-RRB- throws_VBZ Exception_NNP -LCB-_-LRB- super_JJ ._.
setUp_NNP -LRB-_-LRB- -RRB-_-RRB- ;_: out_RP =_SYM new_JJ ByteArrayOutputStream_NNP -LRB-_-LRB- -RRB-_-RRB- ;_: System_NNP ._.
setOut_NNP -LRB-_-LRB- new_JJ PrintStream_NNP -LRB-_-LRB- out_RP -RRB-_-RRB- -RRB-_-RRB- ;_: err_VB =_SYM new_JJ ByteArrayOutputStream_NNP -LRB-_-LRB- -RRB-_-RRB- ;_: System_NNP ._.
setErr_NNP -LRB-_-LRB- new_JJ PrintStream_NNP -LRB-_-LRB- err_VB -RRB-_-RRB- -RRB-_-RRB- ;_: -RCB-_-RRB- public_JJ void_JJ testOut_NN -LRB-_-LRB- -RRB-_-RRB- -LCB-_-LRB- String_NNP -LRB-_-LRB- -RRB-_-RRB- args_VBZ =_SYM new_JJ String_NNP -LRB-_-LRB- -RRB-_-RRB- -LCB-_-LRB- ``_`` arg1_NN ''_'' -RCB-_-RRB- ;_: JBench_NNP ._.
main_JJ -LRB-_-LRB- args_NNS -RRB-_-RRB- ;_: \/_CD \/_CD Expect_VB nothing_NN on_IN the_DT error_NN stream_NN ,_, something_NN on_IN the_DT output_NN stream_NN assertTrue_NNP -LRB-_-LRB- err_VB ._.
toString_VBG -LRB-_-LRB- -RRB-_-RRB- ._.
length_NN -LRB-_-LRB- -RRB-_-RRB- =_SYM =_SYM 0_CD -RRB-_-RRB- ;_: assertTrue_NNP -LRB-_-LRB- out_RP ._.
toString_VBG -LRB-_-LRB- -RRB-_-RRB- ._.
length_NN -LRB-_-LRB- -RRB-_-RRB- -RRB-_-RRB- 0_CD -RRB-_-RRB- ;_: -RCB-_-RRB- public_JJ void_JJ testNoArgs_NNS -LRB-_-LRB- -RRB-_-RRB- -LCB-_-LRB- SecurityManager_NNP curSecurityManager_NNP =_SYM System_NNP ._.
getSecurityManager_NNP -LRB-_-LRB- -RRB-_-RRB- ;_: System_NNP ._.
setSecurityManager_NN -LRB-_-LRB- new_JJ java_NN ._.
lang_NN ._.
SecurityManager_NNP -LRB-_-LRB- -RRB-_-RRB- -LCB-_-LRB- public_JJ void_JJ checkExit_NN -LRB-_-LRB- int_FW code_NN -RRB-_-RRB- -LCB-_-LRB- throw_VB new_JJ SecurityException_NNP -LRB-_-LRB- -RRB-_-RRB- ;_: -RCB-_-RRB- -RCB-_-RRB- -RRB-_-RRB- ;_: try_VB -LCB-_-LRB- JBench_NNP ._.
main_JJ -LRB-_-LRB- new_JJ String_NNP -LRB-_-LRB- -RRB-_-RRB- -LCB-_-LRB- -RCB-_-RRB- -RRB-_-RRB- ;_: fail_VB -LRB-_-LRB- -RRB-_-RRB- ;_: -RCB-_-RRB- catch_NN -LRB-_-LRB- SecurityException_NNP ex_FW -RRB-_-RRB- -LCB-_-LRB- \/_CD \*_SYM expected_VBN \*_SYM \/_NN -RCB-_-RRB- finally_RB -LCB-_-LRB- System_NNP ._.
setSecurityManager_NN -LRB-_-LRB- curSecurityManager_NNP -RRB-_-RRB- ;_: -RCB-_-RRB- -RCB-_-RRB- -RCB-_-RRB- Do_VBP not_RB take_VB the_DT above_JJ code_NN as_IN a_DT good_JJ example_NN of_IN a_DT UnitTest_NNP class_NN ._.
I_PRP left_VBD a_DT lot_NN of_IN ``_`` good_JJ practices_NNS ''_'' out_RP for_IN the_DT sake_NN of_IN brevity_NN ._.
-----------------_JJ Quick_NNP update_VBP on_IN JBench_NNP ._.
The_DT project_NN has_VBZ been_VBN dead_JJ for_IN 2_CD years_NNS ._.
I_PRP contacted_VBD the_DT original_JJ developer_NN and_CC he_PRP is_VBZ currently_RB working_VBG on_IN ._.
NET_NNP stuff_NN and_CC wo_MD n't_RB be_VB updating_VBG JBench_NNP ._.
I_PRP 'm_VBP working_VBG on_IN refactoring_VBG it_PRP and_CC adding_VBG a_DT bunch_NN of_IN new_JJ features_NNS ._.
The_DT HtmlReport_NNP feature_NN is_VBZ really_RB cool_JJ ._.
It_PRP creates_VBZ an_DT HTML_NNP page_NN with_IN all_PDT the_DT benchmark_JJ information_NN ,_, stats_NNS ,_, and_CC charts_NNS generated_VBN by_IN JFreeChart_NNP ._.
I_PRP 'll_MD have_VB a_DT longer_RBR update_VB when_WRB I_PRP 've_VBP finished_VBN it_PRP ._.
I_PRP just_RB ran_VBD across_IN a_DT Java_NNP Benchmarking_NNP Framework_NNP called_VBD JBench_NNP ._.
I_PRP was_VBD quite_RB interested_JJ since_IN I_PRP have_VBP n't_RB tried_VBN any_DT official_JJ benchmarking_NN ,_, so_IN I_PRP downloaded_VBD and_CC reviewed_VBD it_PRP ._.
It_PRP 's_VBZ not_RB a_DT stand-alone_JJ benchmarking_NN tool_NN like_IN a_DT CPU_NNP or_CC graphics_NNS card_NN benchmarker_NN ._.
It_PRP is_VBZ a_DT framework_NN similar_JJ to_TO JUnit_VB that_DT requires_VBZ the_DT programmer_NN to_TO put_VB some_DT thought_VBN into_IN what_WP they_PRP are_VBP testing_VBG and_CC actually_RB write_VB some_DT code_NN ._.
Without_IN further_JJ ado_NN ,_, here_RB 's_POS my_PRP$ review_NN along_IN with_IN some_DT generic_JJ benchmark_NN testing_NN notes_NNS ._.
BENCHMARK_NN TESTS_NNS ---------------------------_JJ Purpose_NN of_IN Benchmark_NNP Tests_NNPS The_DT purpose_NN of_IN benchmark_NN tests_NNS is_VBZ to_TO determine_VB how_WRB a_DT certain_JJ implementation_NN performs_VBZ ._.
Benchmark_NN tests_NNS are_VBP commonly_RB used_VBN to_TO compare_VB different_JJ algorithms_NNS ,_, data_NNS structures_NNS ,_, implementation_NN ,_, etc._FW against_IN each_DT other_JJ ._.
Another_DT benefit_NN of_IN benchmark_NN tests_NNS is_VBZ to_TO prove_VB that_DT your_PRP$ implementation_NN is_VBZ correct_JJ for_IN the_DT situation_NN ._.
It_PRP can_MD be_VB used_VBN in_IN documentation_NN and_CC to_TO answer_VB future_JJ ``_`` Why_WRB did_VBD you_PRP do_VBP it_PRP that_DT way_NN ?_. ''_''
questions_NNS ._.
Benchmarks_NNS are_VBP not_RB functional_JJ tests_NNS ._.
While_IN they_PRP might_MD test_VB some_DT functionality_NN ,_, their_PRP$ main_JJ purpose_NN is_VBZ not_RB to_TO verify_VB the_DT functional_JJ correctness_NN of_IN the_DT code_NN ._.
Benchmarks_NNS are_VBP not_RB load_NN or_CC stress_NN tests_NNS ._.
While_IN they_PRP put_VBP load_NN and_CC stress_NN on_IN the_DT code_NN ,_, their_PRP$ main_JJ purpose_NN is_VBZ to_TO test_VB the_DT speed_NN of_IN the_DT code_NN and_CC not_RB to_TO test_VB how_WRB the_DT code_NN handles_VBZ a_DT stress-induced_JJ crash_NN or_CC how_WRB it_PRP effects_NNS the_DT system_NN resources_NNS ._.
Benchmarks_NNS are_VBP not_RB performance_NN tests_NNS ._.
They_PRP do_VBP output_NN performance_NN statistics_NNS ,_, but_CC those_DT statistics_NNS are_VBP not_RB used_VBN to_TO determine_VB a_DT pass\/fail_NN of_IN the_DT performance_NN requirements_NNS ._.
Benchmark_NNP Purpose_NNP Examples_NNS Test_NNP performance_NN of_IN code_NN with_IN logging_VBG at_IN different_JJ levels_NNS ._.
Test_NNP in-house_JJ code_NN against_IN third-party_JJ code_NN that_WDT does_VBZ something_NN similar_JJ ._.
Test_NN a_DT generic_JJ implementation_NN against_IN a_DT specific_JJ implementation_NN ._.
Test_NNP an_DT algorithm_NN 's_POS efficiency_NN with_IN different_JJ parameters_NNS ,_, different_JJ sizes_NNS ,_, etc._FW ._.
Test_NN the_DT same_JJ code_NN under_IN different_JJ resources_NNS -LRB-_-LRB- JVMs_NNS ,_, OSs_NNP ,_, CPUs_NNP ,_, RAM_NNP sizes_NNS ,_, etc._FW -RRB-_-RRB- JBench_NNP JBench_NNP is_VBZ a_DT framework_NN for_IN benchmarking_VBG java_NN code_NN much_RB in_IN the_DT same_JJ way_NN that_IN JUnit_NNP is_VBZ a_DT framework_NN for_IN unittesting_VBG java_NN code_NN ._.
To_TO create_VB a_DT Benchmark_NNP test_NN using_VBG the_DT JBench_NNP framework_NN ,_, create_VB a_DT class_NN that_WDT implements_VBZ the_DT uk.org_NN ._.
skeet_NN ._.
jbench_NN ._.
BenchTask_NNP interface_NN ._.
Overwrite_NNP the_DT constructor_NN to_TO do_VB one-time_JJ setups_NNS ,_, checkConfiguration_NNP -LRB-_-LRB- -RRB-_-RRB- to_TO verify_VB the_DT data_NNS in_IN the_DT properties_NNS file_NN ,_, prepareTests_NNS -LRB-_-LRB- -RRB-_-RRB- for_IN setup_NN that_IN needs_VBZ to_TO be_VB done_VBN before_IN the_DT tests_NNS are_VBP run_VBN -LRB-_-LRB- only_RB called_VBN once_RB per_IN task_NN ,_, not_RB once_RB per_IN jbench_NN ._.
runs_NNS -RRB-_-RRB- ,_, runTest_NNP -LRB-_-LRB- -RRB-_-RRB- to_TO actually_RB execute_VB the_DT code_NN being_VBG benchmarked_VBN ,_, checkResults_NNS -LRB-_-LRB- -RRB-_-RRB- to_TO do_VB any_DT post-test_JJ verification_NN ,_, and_CC getDescription_NNP that_IN returns_VBZ a_DT String_NNP which_WDT is_VBZ printed_VBN out_RP to_TO describe_VB the_DT test_NN being_VBG run_VBN ._.
All_DT variables_NNS defined_VBN for_IN the_DT test_NN in_IN the_DT properties_NNS file_NN should_MD have_VB a_DT setVariable_JJ -LRB-_-LRB- -RRB-_-RRB- method_NN ._.
All_PDT the_DT test_NN parameters_NNS and_CC scenarios_NNS are_VBP defined_VBN in_IN a_DT properties_NNS file_VBP given_VBN as_IN a_DT command-line_JJ option_NN to_TO the_DT JBench_NNP program_NN ._.
Some_DT items_NNS listed_VBN in_IN this_DT file_NN is_VBZ how_WRB many_JJ iterations_NNS of_IN the_DT runTest_JJS function_NN is_VBZ done_VBN for_IN each_DT test_NN ,_, which_WDT classes_NNS are_VBP the_DT benchmark_NN tests_NNS along_IN with_IN test_NN variables_NNS ,_, and_CC information_NN to_TO output_NN ._.
The_DT same_JJ test_NN can_MD be_VB listed_VBN twice_RB with_IN different_JJ variables_NNS which_WDT allows_VBZ it_PRP to_TO be_VB benchmarked_VBN in_IN different_JJ ways_NNS ._.
The_DT one_CD concern_NN I_PRP have_VBP is_VBZ that_IN it_PRP has_VBZ n't_RB been_VBN developed_VBN for_IN 3_CD years_NNS ._.
There_EX is_VBZ only_RB mention_VB of_IN java_NN 1.1_CD and_CC 1.2_CD on_IN the_DT website_NN ,_, so_IN the_DT behavior_NN on_IN 1.3_CD and_CC 1.4_CD is_VBZ unknown_JJ ._.
Also_RB ,_, operating_VBG systems_NNS that_WDT have_VBP been_VBN developed_VBN in_IN the_DT past_JJ 3_CD years_NNS -LRB-_-LRB- Linux_NNP 2.6_CD kernel_NN ,_, Solaris_NNP 9_CD ,_, Windows_VBZ XP_NNP -RRB-_-RRB- might_MD produce_VB unknown_JJ behavior_NN ._.
Judging_VBG by_IN the_DT small_JJ examples_NNS I_PRP have_VBP done_VBN -LRB-_-LRB- java_NN 1.4_CD on_IN Linux_NNP 2.6_CD kernel_NN -RRB-_-RRB- ,_, it_PRP seems_VBZ to_TO perform_VB correctly_RB ._.
Website_NNP :_: http:\/\/www.yoda.arachsys.com\/java\/jbench\/_VB JBench_NNP Output_NN Analysis_NNP Before_IN the_DT tests_NNS are_VBP run_VBN ,_, data_NNS is_VBZ printed_VBN out_RP on_IN the_DT environment_NN ,_, like_IN the_DT JVM_NNP ,_, OS_NNP ,_, and_CC JRE_NNP used_VBD ._.
This_DT data_NNS can_MD be_VB used_VBN to_TO distinguish_VB between_IN tests_NNS where_WRB those_DT parameters_NNS change_VBP ._.
Next_IN the_DT data_NNS for_IN each_DT test_NN is_VBZ printed_VBN out_RP ._.
This_DT includes_VBZ a_DT description_NN of_IN the_DT test_NN ,_, the_DT result_NN of_IN the_DT test_NN ,_, and_CC if_IN successful_JJ ,_, the_DT time_NN it_PRP took_VBD for_IN each_DT test_NN iteration_NN -LRB-_-LRB- specified_VBN by_IN jbench_NN ._.
runs_NNS -RRB-_-RRB- ._.
At_IN the_DT bottom_NN of_IN each_DT test_NN is_VBZ the_DT mean_NN ,_, variance_NN ,_, and_CC standard_JJ deviation_NN ._.
To_TO give_VB a_DT quick_JJ refresher_NN of_IN the_DT terms_NNS :_: -_: The_DT mean_NN of_IN a_DT data_NN set_NN is_VBZ simply_RB the_DT arithmetic_NN average_NN of_IN the_DT values_NNS in_IN the_DT set_NN ,_, obtained_VBN by_IN summing_VBG the_DT values_NNS and_CC dividing_VBG by_IN the_DT number_NN of_IN values_NNS ._.
-_: The_DT variance_NN of_IN a_DT data_NN set_NN is_VBZ the_DT arithmetic_NN average_NN of_IN the_DT squared_VBN differences_NNS between_IN the_DT values_NNS and_CC the_DT mean_NN ._.
-_: The_DT standard_JJ deviation_NN is_VBZ the_DT square_JJ root_NN of_IN the_DT variance_NN The_DT mean_NN is_VBZ a_DT measure_NN of_IN the_DT center_NN of_IN the_DT distribution_NN ._.
The_DT variance_NN and_CC the_DT standard_JJ deviation_NN are_VBP both_DT measures_NNS of_IN the_DT spread_NN of_IN the_DT distribution_NN about_IN the_DT mean_NN ._.
For_IN benchmarking_VBG purposes_NNS ,_, the_DT smaller_JJR the_DT mean_NN the_DT better_JJR -LRB-_-LRB- i.e._FW the_DT faster_RBR the_DT code_NN executed_VBN -RRB-_-RRB- ,_, and_CC the_DT smaller_JJR the_DT standard_JJ deviation_NN the_DT better_JJR ._.
A_DT large_JJ standard_JJ deviation_NN indicates_VBZ that_IN the_DT function_NN is_VBZ inconsistant_JJ ,_, the_DT testing_NN platform_NN is_VBZ unstable_JJ ,_, or_CC other_JJ events_NNS are_VBP occuring_VBG regularly_RB like_IN garbage_NN collection_NN ._.
Benchmark_NNP Coding_NNP Standards_NNP -LRB-_-LRB- my_PRP$ personal_JJ preferences_NNS -RRB-_-RRB- The_DT benchmark_NN tests_NNS should_MD be_VB kept_VBN in_IN a_DT seperate_JJ directory_NN structure_NN that_WDT is_VBZ parallel_JJ to_TO the_DT source_NN tree_NN ._.
No_DT test_NN code_NN ,_, including_VBG benchmark_NN tests_NNS ,_, should_MD be_VB kept_VBN in_IN the_DT same_JJ location_NN or_CC file_NN as_IN production_NN code_NN ._.
All_DT configuration_NN files_NNS ,_, libs_NNS ,_, and_CC all_DT other_JJ supporting_VBG files_NNS should_MD also_RB be_VB kept_VBN under_IN this_DT seperate_JJ and_CC parallel_JJ directory_NN structure_NN ._.
The_DT test_NN class_NN should_MD be_VB named_VBN the_DT same_JJ as_IN the_DT class_NN it_PRP is_VBZ benchmarking_VBG ,_, but_CC appended_VBN with_IN JBench_NNP -LRB-_-LRB- i.e._FW ListJBench_NNP -RRB-_-RRB- ._.
If_IN the_DT test_NN class_NN is_VBZ only_RB testing_VBG a_DT function_NN or_CC specific_JJ functionality_NN of_IN that_DT class_NN ,_, then_RB it_PRP should_MD be_VB named_VBN approprietly_RB -LRB-_-LRB- i.e._FW Class_functionJBench_NNP -RRB-_-RRB- ._.
Note_VB that_IN if_IN a_DT different_JJ framework_NN is_VBZ used_VBN for_IN benchmarking_VBG ,_, then_RB a_DT unique_JJ name_NN for_IN that_DT framework_NN should_MD be_VB appended_VBN instead_RB of_IN JBench_NNP ._.
Example_NNP Setup_NNP :_: root_NN \/_NN -LRB-_-LRB- src_FW ,_, conf_NN ,_, lib_NN -RRB-_-RRB- root\/src\/com_NN \/_CD jake\/commons\/datastructure_NN \/_CD ReadWriteLock_NNP ._.
java_NN root\/bench\/lib_NN \/_NN jbench-0_JJ .61_CD ._.
jar_NN root\/bench\/conf_NN \/_NN datastructure_NN ._.
jbench_JJ root\/bench\/src_NN \/_NN com\/jake\/commons_NNS \/_VBP datastructure\/ReadWriteLockJBench_NNP ._.
java_NN root\/bench\/src_NN \/_NN com\/jake\/commons_NNS \/_VBP datastructure\/ReadWriteLock_NNP __NNP allWritersJBench_NNP ._.
java_NN JBench_NNP Example_NNP Run_NNP LD_LIBRARY_PATH_NNP =_SYM benchmark\/shlib\/linux_FW java_FW -_: Xruncputimer_NNP -_: classpath_NN $_$ CLASSPATH_CD :_: \/_VB home\/jake\/IdeaProjects_NNS \/_VB examples\/target\/test-classes_NNS :_: \/_VB home\/jake\/IdeaProjects_NNS \/_VB examples\/target\/classes_NNS :_: \/_VB home\/jewerdt\/IdeaProjects_NNS \/_FW examples\/benchmark\/lib_FW \/_FW jbench-0_JJ .61_CD ._.
jar_NN uk.org_NN ._.
skeet_NN ._.
jbench_NN ._.
JBench_NNP benchmark\/conf\/datastructure_NN ._.
jbench_NN Here_RB 's_VBZ an_DT example_NN of_IN the_DT diagram_NN below_IN in_IN a_DT Use_NN Case_NN instead_RB of_IN Sequence_NN format_NN ._.
There_EX is_VBZ a_DT little_RB more_JJR information_NN in_IN it_PRP ,_, but_CC as_IN you_PRP can_MD see_VB the_DT readability_NN and_CC comprehension_NN is_VBZ much_RB lower_JJR ._.
Ok_NNP ,_, I_PRP experimented_VBD a_DT bit_NN with_IN diagramming_VBG the_DT development_NN process_NN of_IN a_DT new_JJ feature_NN to_TO an_DT existing_VBG system_NN ._.
The_DT UML_NNP diagram_NN that_WDT worked_VBD the_DT best_JJS for_IN me_PRP was_VBD a_DT Sequence_NNP Diagram_NNP ._.
Maybe_RB I_PRP 'll_MD post_VB some_DT of_IN the_DT other_JJ UML_NNP diagrams_NNS for_IN a_DT compare\/contrast_NN ._.
There_EX is_VBZ a_DT ton_NN of_IN information_NN left_VBD out_RP like_IN what_WP the_DT requirements_NNS and_CC specs_NNS should_MD contain_VB ,_, the_DT different_JJ types_NNS of_IN developer_NN and_CC QA_NNP tests_NNS ,_, and_CC integration_NN of_IN the_DT feature_NN into_IN the_DT existing_VBG product_NN ,_, infrastructure_NN and_CC build_VB systems_NNS ._.
I_PRP think_VBP accompaning_VBG the_DT diagram_NN with_IN a_DT checklist_NN -LRB-_-LRB- pdf_NN -RRB-_-RRB- of_IN tasks_NNS and_CC tasks_NNS '_POS tasks_NNS is_VBZ the_DT next_JJ step_NN ._.
CLICK_NNP the_DT image_NN for_IN a_DT larger_JJR and_CC readable_JJ picture_NN A_DT nice_JJ site_NN with_IN examples_NNS of_IN the_DT different_JJ types_NNS of_IN UML_NNP diagrams_NNS :_: SmartDraw_NNP UML_NNP Center_NNP This_DT was_VBD going_VBG to_TO be_VB a_DT post_NN of_IN how_WRB to_TO tell_VB when_WRB you_PRP or_CC someone_NN else_RB is_VBZ actually_RB done_VBN with_IN a_DT task_NN ._.
However_RB ,_, I_PRP am_VBP going_VBG to_TO expand_VB more_JJR to_TO cover_VB the_DT entire_JJ process_NN ,_, albeit_IN quite_RB undetailed_JJ ,_, for_IN both_DT a_DT development_NN and_CC a_DT testing_NN scenario_NN ._.
One_CD issue_NN that_WDT comes_VBZ up_RP is_VBZ the_DT difference_NN between_IN a_DT project_NN and_CC a_DT task_NN -LRB-_-LRB- what_WP is_VBZ a_DT task_NN to_TO one_CD person_NN can_MD be_VB a_DT project_NN to_TO another_DT person_NN -RRB-_-RRB- and_CC realizing_VBG that_IN -_: done_VBN -_: and_CC different_JJ percentages_NNS of_IN -_: done_VBN -_: can_MD be_VB different_JJ in_IN each_DT case_NN ._.
This_DT is_VBZ also_RB recursive_JJ ,_, so_IN each_DT checkpoint_NN of_IN done-ness_NN of_IN the_DT project_NN has_VBZ to_TO be_VB -_: done_VBN -_: and_CC therefore_RB needs_VBZ it_PRP 's_VBZ own_JJ checkpoints_NNS of_IN done-ness_NN ._.
I_PRP suppose_VBP at_IN a_DT certain_JJ point_NN ,_, the_DT task_NN will_MD be_VB small\/independent_JJ enough_RB that_IN it_PRP ca_MD n't_RB be_VB considered_VBN a_DT project_NN ._.
At_IN this_DT point_NN the_DT person_NN responsible_JJ for_IN the_DT task_NN can_MD say_VB -LRB-_-LRB- and_CC be_VB trusted_VBN -RRB-_-RRB- how_WRB close_RB the_DT task_NN is_VBZ to_TO being_VBG finished_VBN ._.
This_DT first_JJ scenario_NN is_VBZ for_IN a_DT significant_JJ addition_NN or_CC change_NN to_TO an_DT existing_VBG system_NN ._.
With_IN a_DT little_JJ tweaking_NN ,_, this_DT can_MD probably_RB be_VB adapted_VBN to_TO an_DT entirely_RB new_JJ system_NN ._.
Below_NNP is_VBZ the_DT breakdown_NN of_IN the_DT various_JJ parts_NNS of_IN the_DT process_NN with_IN percentages_NNS -LRB-_-LRB- of_IN -_: done_VBN -_: -RRB-_-RRB- assigned_VBN to_TO the_DT completion_NN of_IN each_DT process_NN ._.
I_PRP would_MD really_RB like_VB to_TO break_VB down_RP each_DT section_NN individually_RB and_CC create_VB a_DT chart_NN like_IN this_DT based_VBN on_IN only_RB that_DT section_NN -LRB-_-LRB- and_CC recursive_JJ -RRB-_-RRB- ,_, but_CC this_DT will_MD do_VB for_IN now_RB ._.
10_CD %_NN -_: Requirements_NNS are_VBP finalized_VBN and_CC signed_VBN off_RP on_IN ._.
20_CD %_NN -_: Development_NNP planning_NN is_VBZ done_VBN and_CC documented_VBN ,_, with_IN appropriate_JJ diagrams_NNS and_CC additional_JJ specs_NNS -LRB-_-LRB- or_CC additions_NNS to_TO the_DT original_JJ spec_NN -RRB-_-RRB- ._.
These_DT specs_NNS should_MD also_RB include_VB boundary_NN cases_NNS and_CC testing_NN cases\/ideas\/areas_NNS and_CC performance_NN requirement\/expectations_NNS ._.
30_CD %_NN -_: Development_NNP is_VBZ done_VBN -LRB-_-LRB- phase_NN 1_CD -RRB-_-RRB- ._.
40_CD %_NN -_: Developer_NNP tests_NNS are_VBP done_VBN -LRB-_-LRB- unit_NN tests_NNS in_IN the_DT 90-100_CD %_NN code_NN coverage_NN range_NN -RRB-_-RRB- and_CC signed_VBD off_RP on_IN by_IN QA_NNP ._.
QA_NNP should_MD sign_VB off_RP that_IN the_DT test_NN cases_NNS are_VBP thorough_JJ ,_, developed_VBD according_VBG to_TO set_VB standards_NNS and_CC conventions_NNS ,_, are_VBP easily_RB runnable_JJ ,_, and_CC actually_RB work_NN ._.
50_CD %_NN -_: QA_NNP writes_VBZ tests_NNS for_IN the_DT developed_VBN piece_NN ._.
Depending_VBG on_IN the_DT size\/function_NN of_IN what_WP was_VBD developed_VBN ,_, a_DT separate_JJ functional_JJ test_NN can_MD be_VB written_VBN for_IN the_DT piece_NN ,_, otherwise_RB it_PRP can_MD be_VB combined_VBN into_IN existing_VBG functional_JJ tests_NNS ._.
Performance_NNP tests_NNS should_MD also_RB be_VB written_VBN if_IN any_DT performance_NN specs_NNS were_VBD given_VBN ._.
60_CD %_NN -_: Development_NNP is_VBZ done_VBN with_IN incorporating_VBG QA_NNP bugs_NNS ,_, suggestions_NNS ,_, changes_NNS -LRB-_-LRB- phase_NN 2_CD -RRB-_-RRB- ._.
70_CD %_NN -_: QA_NNP verifies_VBZ phase_NN 2_CD of_IN development_NN ._.
This_DT step_NN and_CC the_DT previous_JJ step_NN should_MD be_VB repeated_VBN as_RB often_RB as_IN needed_VBN ._.
QA_NNP then_RB integrates_VBZ the_DT piece_NN into_IN the_DT current_JJ acceptance_NN ,_, regression_NN ,_, load_NN ,_, etc._FW tests_NNS and\/or_CC writes_VBZ new_JJ ones_NNS for_IN the_DT piece_NN ._.
80_CD %_NN -_: Development_NNP is_VBZ done_VBN incorporating_VBG QA_NNP bugs_NNS ,_, suggestions_NNS ,_, changes_NNS -LRB-_-LRB- phase_NN 3_CD -RRB-_-RRB- ._.
90_CD %_NN -_: QA_NNP verifies_NNS and_CC signs_NNS off_IN on_IN phase_NN 3_CD of_IN development_NN ._.
The_DT previous_JJ step_NN should_MD be_VB repeated_VBN as_RB often_RB as_IN needed_VBN ._.
100_CD %_NN -_: Documentation_NN is_VBZ completed_VBN by_IN the_DT developer_NN ,_, which_WDT includes_VBZ javadocs_NNS ,_, updating_VBG current_JJ documentation_NN ,_, and_CC updating_VBG the_DT original_JJ specs_NNS and_CC requirements_NNS with_IN the_DT information_NN on_IN how_WRB the_DT final_JJ product_NN is_VBZ different_JJ ._.
The_DT project_NN manager_NN analyzes_VBZ the_DT project_NN for_IN information_NN like_IN how_WRB accurate_JJ the_DT time_NN estimates_NNS were_VBD ,_, where_WRB the_DT problems_NNS occurred_VBD ,_, etc._FW ._.
The_DT second_JJ scenario_NN is_VBZ for_IN a_DT post-production_JJ bug_NN fix_NN or_CC small_JJ change_NN request_NN -LRB-_-LRB- will_MD be_VB referred_VBN to_TO as_IN a_DT bug_NN for_IN this_DT example_NN -RRB-_-RRB- ._.
One_CD thing_NN to_TO keep_VB in_IN mind_NN here_RB is_VBZ that_IN not_RB everyone_NN is_VBZ tasked_VBN 100_CD %_NN for_IN the_DT duration_NN of_IN the_DT project_NN ,_, however_RB it_PRP is_VBZ not_RB always_RB safe_JJ to_TO task_NN them_PRP on_IN a_DT different_JJ project_NN as_IN they_PRP may_MD be_VB needed_VBN back_RB at_IN the_DT current_JJ project_NN in_IN the_DT future_NN ._.
10_CD %_NN -_: Complete_JJ description_NN of_IN the_DT bug_NN ,_, symptoms_NNS ,_, and_CC how_WRB to_TO tell_VB it_PRP has_VBZ been_VBN fixed_VBN ._.
20_CD %_NN -_: QA_NNP duplicates_VBZ the_DT bug_NN and_CC writes_VBZ test_NN that_WDT can_MD be_VB used_VBN to_TO automatically_RB duplicate_VB the_DT bug_NN ._.
The_DT test_NN should_MD be_VB written_VBN to_TO give_VB the_DT developer_NN specific_JJ steps_NNS taken_VBN ,_, log_VB files_NNS ,_, thread_NN dumps_NNS ,_, performance_NN statistics_NNS ,_, and_CC whatever_WDT else_RB is_VBZ needed_VBN ._.
30_CD %_NN -_: Developer_NNP analyzes_VBZ bug_NN description_NN ,_, gives_VBZ written_VBN analysis_NN of_IN what_WP is_VBZ causing_VBG the_DT bug_NN and_CC what_WP will_MD be_VB involved_VBN -LRB-_-LRB- resources_NNS ,_, schedule_NN estimate_NN ,_, possible_JJ side-effects_NNS -RRB-_-RRB- to_TO fix_VB the_DT bug_NN ._.
40_CD %_NN -_: QA_NNP analyzes_VBZ the_DT bug_NN description_NN and_CC the_DT developer_NN 's_POS analysis_NN ,_, and_CC gives_VBZ written_VBN analysis_NN on_IN what_WP will_MD be_VB involved_VBN -LRB-_-LRB- resources_NNS ,_, schedule_NN estimates_NNS -RRB-_-RRB- to_TO verify_VB the_DT bug_NN ._.
50_CD %_NN -_: Sign_NN off_RP by_IN BIZ_NNP ,_, DEV_NNP ,_, and_CC QA_NNP to_TO commit_VB to_TO the_DT fixing_VBG of_IN the_DT bug_NN ._.
60_CD %_NN -_: Development_NNP planning_NN is_VBZ done_VBN and_CC documented_VBN ,_, with_IN appropriate_JJ diagrams_NNS and_CC additional_JJ specs_NNS ._.
If_IN this_DT bug_NN fix_NN will_MD change_VB something_NN specified_VBN in_IN a_DT previous_JJ spec_NN ,_, doc_NN ,_, or_CC diagram_NN ,_, an_DT addendum_NN should_MD be_VB made_VBN to_TO that_DT documentation_NN ._.
These_DT specs_NNS should_MD also_RB include_VB boundary_NN cases_NNS and_CC testing_NN cases\/ideas\/areas_NNS and_CC performance_NN requirement\/expectations_NNS ._.
70_CD %_NN -_: QA_NNP runs_VBZ verification_NN test_NN ,_, writes_VBZ additional_JJ tests_NNS as_IN needed_VBN ,_, and_CC incorporates_VBZ change_NN into_IN current_JJ tests_NNS ._.
This_DT step_NN and_CC the_DT previous_JJ step_NN should_MD be_VB repeated_VBN as_RB often_RB as_IN needed_VBN ._.
80_CD %_NN -_: Documentation_NN is_VBZ completed_VBN by_IN the_DT developer_NN ,_, which_WDT includes_VBZ javadocs_NNS ,_, updating_VBG current_JJ documentation_NN ,_, and_CC updating_VBG the_DT original_JJ specs_NNS and_CC requirements_NNS with_IN the_DT information_NN on_IN how_WRB the_DT final_JJ product_NN is_VBZ different_JJ ._.
The_DT project_NN manager_NN analyzes_VBZ the_DT project_NN for_IN information_NN like_IN how_WRB accurate_JJ the_DT time_NN estimates_NNS were_VBD ,_, where_WRB the_DT problems_NNS occurred_VBD ,_, etc._FW ._.
100_CD %_NN -_: A_DT new_JJ build_VB of_IN the_DT software_NN is_VBZ completed_VBN and_CC released_VBN successfully_RB ._.
I_PRP seem_VBP to_TO have_VB opened_VBN a_DT can_NN of_IN worms_NNS that_IN I_PRP do_VBP n't_RB know_VB how_WRB to_TO get_VB myself_PRP out_IN of_IN ._.
I_PRP 'll_MD awkwardly_RB end_VB the_DT post_NN here_RB ,_, but_CC I_PRP 'll_MD probably_RB re-visit_VB this_DT topic_NN after_IN I_PRP have_VBP covered_VBN other_JJ topics_NNS ._.
writing_VBG this_DT gives_VBZ me_PRP other_JJ ideas_NNS for_IN blogs_NNS ._.
-_: What_WP makes_VBZ good_JJ requirements_NNS ,_, differentiated_VBN by_IN the_DT size_NN and_CC function_NN of_IN what_WP is_VBZ being_VBG developed_VBN ._.
-_: What_WP determines_VBZ well-written_JJ developer_NN tests_NNS ._.
Coding_VBG conventions_NNS ,_, non-dependence_NN on_IN other_JJ units_NNS ,_, boundary_NN cases_NNS ,_, negative_JJ tests_NNS ,_, etc._FW -_: Expand_VB on_IN the_DT project_NN lifecycle_NN ._.
Mark_NNP tasks_NNS as_IN BIZ_NNP ,_, DEV_NNP ,_, DOC_NNP ,_, and_CC QA_NNP ._.
Mark_NNP tasks_NNS as_IN optional_JJ if_IN needed_VBN ._.
-_: Create_VB a_DT project_NN checklist_NN that_WDT can_MD be_VB used_VBN -LRB-_-LRB- and_CC customized_VBN according_VBG to_TO project\/task_VB -RRB-_-RRB- ._.
-_: A_DT UML_NNP Use-Case_NNP diagram_NN for_IN different_JJ development_NN processes_NNS ._.
Inspiration_NN for_IN this_DT blog_NN was_VBD from_IN this_DT article_NN :_: StickyMinds_NNS -_: When_WRB is_VBZ Done_VBN Really_RB Done_VBN ?_.
This_DT is_VBZ my_PRP$ first_JJ time_NN writting_VBG a_DT blog_NN ._.
The_DT blogs_NNS I_PRP write_VBP here_RB will_MD mainly_RB focus_VB on_IN the_DT problems_NNS I_PRP see_VBP at_IN work_NN -LRB-_-LRB- and_CC am_VB trying_VBG to_TO fix_VB -RRB-_-RRB- and_CC the_DT good_JJ things_NNS I_PRP see_VBP at_IN work_NN that_IN I_PRP want_VBP to_TO write_VB about_IN for_IN future_JJ reference_NN ._.
I_PRP do_VBP n't_RB have_VB any_DT expectations_NNS for_IN this_DT blog_NN besides_IN personal_JJ use_NN -LRB-_-LRB- I_PRP have_VBP a_DT bad_JJ memory_NN ,_, so_RB writting_JJ my_PRP$ thoughts_NNS down_IN helps_VBZ me_PRP remember_VB them_PRP later_RB -RRB-_-RRB- ._.
However_RB ,_, if_IN I_PRP write_VBP an_DT astoundingly_RB good_JJ blog_NN ,_, I_PRP might_MD rewrite_VB it_PRP as_IN an_DT article_NN and_CC submit_VB it_PRP to_TO a_DT web_NN site_NN or_CC magazine_NN ._.
Who_WP knows_VBZ ?_.
